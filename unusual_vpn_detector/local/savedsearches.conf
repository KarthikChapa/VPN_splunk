
[Build User GEO Baseline]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 0 2 * * *
description = Creates/updates user_geo_baseline.csv with last 30 days of VPN login locations.
dispatch.earliest_time = 0
display.events.fields = ["host","source","sourcetype","index","eventtype","splunk_server"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
schedule_window = 5
search = index=main sourcetype=csv\
| iplocation src_ip prefix=src_\
| stats count as hits\
        avg(src_lat) as lat\
        avg(src_lon) as lon\
        values(src_country) as countries\
        values(src_city)    as cities\
      by user src_country src_city\
| where hits>=3\
| outputlookup user_geo_baseline.csv

[Build User Session-Stat Baseline]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 0 2 * * *
description = Updates avg/std duration and bytes per user from last 30 days
dispatch.earliest_time = 0
display.events.fields = ["host","source","sourcetype","index","eventtype","splunk_server"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = unusual_vpn_detector
request.ui_dispatch_view = search
schedule_window = 5
search = index=main sourcetype=csv earliest=-30d@d\
| stats  avg(session_duration_seconds)      as avg_dur\
         stdev(session_duration_seconds)    as std_dur\
         avg(bytes_in+bytes_out)            as avg_bytes\
         stdev(bytes_in+bytes_out)          as std_bytes\
       by user\
| outputlookup user_session_stats.csv

[Train Density Model – User × Hour]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 0 3 * * 0
description = Rebuilds df_user_hour_model from the last 30 days of data.
dispatch.earliest_time = 0
display.events.fields = ["host","source","sourcetype","index","eventtype","splunk_server"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = index=main sourcetype=csv earliest=-30d@d\
| eval hour=strftime(_time,"%H")\
| stats count as logins by user hour\
| fit DensityFunction logins BY user INTO df_user_hour_model

[Build User Service-Sequence Baseline]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 0 2 * * *
description = Updates frequent 3-service sequences per user (≥4 hits, last 30 days)
dispatch.earliest_time = 0
display.events.fields = ["host","source","sourcetype","index","eventtype","splunk_server"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = unusual_vpn_detector
request.ui_dispatch_view = search
schedule_window = 15
search = index=main sourcetype=csv earliest=-30d@d\
| sort 0 user _time                         \
| streamstats window=2 current=f values(service_used) AS seq by user\
| where mvcount(seq)=3                      \
| mvcombine seq delim=">"                  \
| stats count as freq by user seq\
| where freq>=4                          \
| outputlookup user_service_seq.csv

[VPN High-Risk Login]
action.email = 1
action.email.sendcsv = 1
action.email.sendresults = 1
action.email.to = karthikch2002@gmail.com
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.expires = 24d
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 15 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","index","eventtype","splunk_server"]
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = unusual_vpn_detector
request.ui_dispatch_view = search
search = index=main sourcetype=csv earliest=-12h\
| iplocation src_ip prefix=src_\
| eval lat = src_lat , lon = src_lon\
| eval hour=strftime(_time,"%H")\
\
| lookup user_geo_baseline.csv user src_country src_city OUTPUT lat lon\
| eval geo_known=if(isnull(lat),0,1)\
| lookup user_geo_baseline.csv user OUTPUT lat AS base_lat lon AS base_lon\
| eval haversine_km=if(geo_known==0,\
        2*6371*asin(sqrt(\
          pow(sin((src_lat-base_lat)*pi()/360),2)+\
          cos(base_lat*pi()/180)*cos(src_lat*pi()/180)*\
          pow(sin((src_lon-base_lon)*pi()/360),2))),0)\
| eval geo_score=case(geo_known=1,0,\
                      haversine_km<500,0.3,\
                      haversine_km<2000,0.6,\
                      1=1,1)\
\
| stats count as logins by user hour\
| apply df_user_hour_model\
| eval temp_score=round(1-probability,2)\
\
| lookup user_session_stats.csv user OUTPUT avg_dur std_dur avg_bytes std_bytes\
| eval z_dur  = abs((session_duration_seconds-avg_dur)/std_dur)\
| eval z_byte = abs(((bytes_in+bytes_out)-avg_bytes)/std_bytes)\
| eval stat_score=round(min(1,z_dur/3)+min(1,z_byte/3),2)\
\
| eventstats last(service_used) as prev_service by user\
| streamstats window=3 current=f values(service_used) as seq by user\
| where mvcount(seq)=3\
| mvcombine seq delim=">"\
| lookup user_service_seq.csv user seq OUTPUT freq\
| eval seq_score=if(isnull(freq),0.7,0)\
\
| eval risk=round(0.35*geo_score+0.25*temp_score+0.25*stat_score+0.15*seq_score,2)\
| table _time user src_ip src_country src_city geo_score temp_score stat_score seq_score risk\
| where risk>=0.5

[VPN Risk Collector]
action.email = 1
action.email.sendcsv = 1
action.email.sendresults = 1
action.email.to = karthikch2002@gmail.com
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.expires = 24d
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 15 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","index","eventtype","splunk_server"]
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = unusual_vpn_detector
request.ui_dispatch_view = search
search = index=main sourcetype=csv earliest=-18h\
| iplocation src_ip prefix=src_\
| eval hour=strftime(_time,"%H")\
| eval lat=src_lat, lon=src_lon\
\
| lookup user_geo_baseline.csv user src_country src_city OUTPUT lat AS known_lat lon AS known_lon\
| eval geo_known = if(isnotnull(known_lat),1,0)\
| lookup user_geo_baseline.csv user OUTPUT lat AS base_lat lon AS base_lon\
| eval haversine_km = if(geo_known==0 AND isnotnull(lat) AND isnotnull(base_lat), 2*6371*asin(sqrt(pow(sin((lat-base_lat)*pi()/360),2)+cos(base_lat*pi()/180)*cos(lat*pi()/180)*pow(sin((lon-base_lon)*pi()/360),2))),0)\
| eval geo_score = case(geo_known==1,0, haversine_km<500,0.3, haversine_km<2000,0.6, 1=1,1)\
\
| eventstats count as logins by user, hour\
| apply df_user_hour_model\
| eval temp_score = round(1-probability,2)\
\
| lookup user_session_stats.csv user OUTPUT avg_dur std_dur avg_bytes std_bytes\
| eval total_bytes = bytes_in + bytes_out\
| eval z_dur = if(std_dur>0, abs((session_duration_seconds-avg_dur)/std_dur),0)\
| eval z_byte = if(std_bytes>0, abs((total_bytes-avg_bytes)/std_bytes),0)\
| eval stat_score = round(min(1,z_dur/3) + min(1,z_byte/3), 2)\
\
| streamstats window=3 current=f values(service_used) as seq by user\
| eval seq_str = if(mvcount(seq)==3, mvjoin(seq,">"), null())\
| lookup user_service_seq.csv user seq AS seq_str OUTPUT freq\
| eval seq_score = if(isnull(freq),0.7,0)\
\
| eval risk = round(0.35*geo_score + 0.25*temp_score + 0.25*stat_score + 0.15*seq_score, 2)\
\
| table _time user src_ip src_country lat lon risk geo_score temp_score stat_score seq_score\
| collect index=vpn_scores sourcetype=vpn:risk
